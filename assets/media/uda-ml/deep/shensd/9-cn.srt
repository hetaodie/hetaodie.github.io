1
00:00:00,000 --> 00:00:02,504
我们的目标是训练我们的神经网络

2
00:00:02,504 --> 00:00:06,115
为此 我们需要定义误差函数

3
00:00:06,115 --> 00:00:10,379
我们再看看感知器的误差函数是什么

4
00:00:10,380 --> 00:00:11,915
这是我们的感知器

5
00:00:11,913 --> 00:00:18,618
在左侧是输入向量 条目为 x1 到 xn

6
00:00:18,620 --> 00:00:26,214
1 表示偏置单元 边是权重 w1 到 wn b 表示偏置单元

7
00:00:26,213 --> 00:00:30,504
最后 我们可以看出这个感知器使用了 s 型函数

8
00:00:30,504 --> 00:00:36,960
感知器定义为 ŷ = σ(Wx + b)

9
00:00:36,960 --> 00:00:39,770
可以看出 这个误差告诉了我们误差衡量结果

10
00:00:39,770 --> 00:00:43,975
表示每个点分类错误的程度有多大

11
00:00:43,975 --> 00:00:47,615
粗略看来 如果点分类正确 这个数字将非常小

12
00:00:47,615 --> 00:00:50,298
如果点分类错误

13
00:00:50,298 --> 00:00:53,509
则衡量了这个点离直线的距离有多远

14
00:00:53,509 --> 00:00:58,000
那么如何在多层感知器中定义误差函数呢？

15
00:00:58,000 --> 00:01:02,420
我们知道 感知器是矩阵相乘并应用 s 型函数的结果

16
00:01:02,420 --> 00:01:07,349
但是误差函数也可以完全这样 对吧？

17
00:01:07,349 --> 00:01:09,569
可以是完全相同的公式

18
00:01:09,569 --> 00:01:13,034
但是现在 ŷ 更加复杂了

19
00:01:13,034 --> 00:01:15,950
但是这个函数依然可以告诉我们点分类错误的程度有多大

20
00:01:15,950 --> 00:01:20,000
但是现在我们看到的是更复杂的界线

