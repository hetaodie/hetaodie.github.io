1
00:00:00,000 --> 00:00:04,915
Now, we finally have all the tools for describing the perceptron algorithm.

2
00:00:04,915 --> 00:00:08,868
We start with a random equation which will determine some line and two regions,

3
00:00:08,868 --> 00:00:11,163
the positive and the negative region.

4
00:00:11,163 --> 00:00:15,044
Now we'll move this line around to get a better and better fit.

5
00:00:15,044 --> 00:00:17,332
So we ask all the points how they're doing.

6
00:00:17,332 --> 00:00:21,094
The four correctly classified points say, "I'm good."

7
00:00:21,094 --> 00:00:25,379
And the two incorrectly classified points say, "Come closer."

8
00:00:25,379 --> 00:00:27,839
So let's listen to the point in the right and

9
00:00:27,838 --> 00:00:31,849
apply the trick to make the line closer to this point.

10
00:00:31,850 --> 00:00:34,335
So here it is. Now this point is good.

11
00:00:34,335 --> 00:00:36,853
Now let's listen to the point in the left.

12
00:00:36,853 --> 00:00:38,494
The point says, "Come closer."

13
00:00:38,494 --> 00:00:41,794
We apply the trick and now the line goes closer to it.

14
00:00:41,795 --> 00:00:45,585
And it actually goes over it classifying correctly.

15
00:00:45,585 --> 00:00:48,298
Now every point is correctly classified and happy.

16
00:00:48,298 --> 00:00:52,700
So let's actually write the pseudocode for this perceptron algorithm.

17
00:00:52,700 --> 00:00:53,780
We start with random weights,

18
00:00:53,780 --> 00:00:56,259
W1 up to Wn and b.

19
00:00:56,259 --> 00:00:58,685
This gives us the equation Wx + b,

20
00:00:58,685 --> 00:01:02,079
the line and the positive and negative areas.

21
00:01:02,079 --> 00:01:07,430
Now for every misclassified point with coordinates x1 up to xn we do the following.

22
00:01:07,430 --> 00:01:12,829
If the prediction was 0, which means the point is a positive point in the negative area,

23
00:01:12,828 --> 00:01:15,464
then we'll update the weights as follows.

24
00:01:15,465 --> 00:01:21,055
For i = 1 to n, we change wi to wi + α × xi,

25
00:01:21,055 --> 00:01:23,120
where α is the learning rate.

26
00:01:23,120 --> 00:01:26,060
In this case, we're using 0.1.

27
00:01:26,060 --> 00:01:30,474
Sometimes we use 0.01 etc. It depends.

28
00:01:30,474 --> 00:01:33,834
Then we also change the bias unit to b + α.

29
00:01:33,834 --> 00:01:37,799
That moves the line closer to the misclassified point.

30
00:01:37,799 --> 00:01:41,319
Now if the prediction was one which means a point is a negative point in

31
00:01:41,319 --> 00:01:44,640
the positive area then we'll update the weights in a similar way,

32
00:01:44,640 --> 00:01:47,189
except we subtract instead of adding.

33
00:01:47,188 --> 00:01:49,404
This means for i = 1,

34
00:01:49,405 --> 00:01:57,875
change wi to wi minus alpha xi and change the bias unit b to be b - α.

35
00:01:57,875 --> 00:02:02,313
And now the line moves closer to our misclassified point.

36
00:02:02,313 --> 00:02:05,309
And now we just repeat the step until we get no errors or

37
00:02:05,310 --> 00:02:08,563
until we have a number of errors that is small or simply we can just say,

38
00:02:08,563 --> 00:02:11,508
do this step a thousand times and stop.

39
00:02:11,508 --> 00:02:14,000
We'll see what are our options later in the class.

