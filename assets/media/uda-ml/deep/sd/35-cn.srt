1
00:00:00,000 --> 00:00:03,979
我们将感知器算法与梯度下降算法进行对比

2
00:00:03,979 --> 00:00:05,844
在梯度下降算法中

3
00:00:05,844 --> 00:00:14,152
我们将权重从 Wi 更改为 Wᵢ + α(ŷ - y)xᵢ

4
00:00:14,153 --> 00:00:17,230
在感知器算法中 并非每个点都会更改权重

5
00:00:17,230 --> 00:00:18,870
只有分类错误的点才会

6
00:00:18,870 --> 00:00:23,565
这里当 x 分类错误时 如果点标签是正的

7
00:00:23,565 --> 00:00:29,789
我们将 xᵢ 加到 wᵢ 上 如果是负值 则用 wᵢ 减去 xᵢ

8
00:00:29,789 --> 00:00:32,539
现在的问题是 二者是一回事吗？

9
00:00:32,539 --> 00:00:37,009
在感知器算法中 标签是 1 和 0

10
00:00:37,009 --> 00:00:40,673
预测 ŷ 也是 1 和 0

11
00:00:40,673 --> 00:00:43,039
所以如果点分类正确

12
00:00:43,039 --> 00:00:48,255
则 y - ŷ = 0 因为 y 等于 ŷ

13
00:00:48,255 --> 00:00:50,200
如果点标为蓝色

14
00:00:50,200 --> 00:00:51,884
则 y = 1

15
00:00:51,884 --> 00:00:55,829
如果分类错误 那么预测必须是 ŷ = 0

16
00:00:55,829 --> 00:00:59,280
所以 ŷ - y 为 -1

17
00:00:59,280 --> 00:01:01,048
类似地 如果点标为红色

18
00:01:01,048 --> 00:01:02,530
那么 y = 0 且 ŷ = 1

19
00:01:02,530 --> 00:01:06,769
所以 ŷ - y = 1

20
00:01:06,769 --> 00:01:09,629
现在可能还不太清晰 但是如果仔细盯着屏幕看

21
00:01:09,629 --> 00:01:13,659
就会发现左右是完全相同的

22
00:01:13,659 --> 00:01:15,180
唯一的区别是 在左侧

23
00:01:15,180 --> 00:01:17,812
ŷ 可以是 0 到 1 之间的任何值

24
00:01:17,811 --> 00:01:19,649
但是在右侧

25
00:01:19,650 --> 00:01:23,599
ŷ 只能是值 0 或 1

26
00:01:23,599 --> 00:01:25,379
很神奇 对不对？

27
00:01:25,379 --> 00:01:28,064
我们再仔细研究下梯度下降

28
00:01:28,063 --> 00:01:31,828
在感知器算法和梯度下降算法中

29
00:01:31,828 --> 00:01:35,472
分类错误的点都会告诉直线靠近点

30
00:01:35,474 --> 00:01:40,769
因为最终都希望点穿过它 使其位于正确的区域

31
00:01:40,769 --> 00:01:43,724
如果点分类正确 会怎样呢？

32
00:01:43,724 --> 00:01:47,269
感知器算法就会说什么也不要做

33
00:01:47,269 --> 00:01:52,995
在梯度算法中 你会更改权重 但是在干什么呢

34
00:01:52,995 --> 00:01:54,465
如果仔细观察

35
00:01:54,465 --> 00:01:58,935
就会发现点是在告诉直线离的更远些

36
00:01:58,935 --> 00:02:01,114
有道理 对吧？

37
00:02:01,114 --> 00:02:03,170
因为如果分类正确的话

38
00:02:03,170 --> 00:02:05,885
假设是蓝色区域的蓝点

39
00:02:05,885 --> 00:02:08,483
你会希望跑到蓝色区域的更远处

40
00:02:08,483 --> 00:02:13,145
这样预测就更接近 1 误差更小

41
00:02:13,145 --> 00:02:16,340
类似地 对于红色区域的红点

42
00:02:16,340 --> 00:02:18,979
点告诉直线离的更远些 是合理的

43
00:02:18,979 --> 00:02:23,164
梯度下降算法就是这么做的

44
00:02:23,163 --> 00:02:26,250
分类错误的点要求直线靠近点

45
00:02:26,250 --> 00:02:30,693
分类正确的点要直线离远点

46
00:02:30,693 --> 00:02:33,228
直线聆听所有点的需求

47
00:02:33,229 --> 00:02:37,000
并采取措施 最终获得很好的解决方案

