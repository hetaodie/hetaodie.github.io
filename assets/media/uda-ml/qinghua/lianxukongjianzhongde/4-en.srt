1
00:00:00,000 --> 00:00:02,654
If you have prior knowledge about the state space,

2
00:00:02,654 --> 00:00:06,160
you can manually design an appropriate discretisation scheme.

3
00:00:06,160 --> 00:00:08,359
Like in our gears switching example,

4
00:00:08,359 --> 00:00:11,445
we knew the relationship between fuel consumption and speed.

5
00:00:11,445 --> 00:00:14,595
But in order to function in arbitrary environments,

6
00:00:14,595 --> 00:00:16,574
we need a more generic method.

7
00:00:16,574 --> 00:00:20,199
One elegant approach for this is tile coding.

8
00:00:20,199 --> 00:00:24,989
Here, the underlying state space is continuous and two dimensional.

9
00:00:24,989 --> 00:00:29,039
We overlay multiple grids or tilings on top of the space,

10
00:00:29,039 --> 00:00:32,079
each slightly offset from each other.

11
00:00:32,079 --> 00:00:35,039
Now, any position S in the state space can be

12
00:00:35,039 --> 00:00:38,234
coarsely identified by the tiles that it activates.

13
00:00:38,234 --> 00:00:40,582
If we assign a bit to each tile,

14
00:00:40,582 --> 00:00:44,628
then we can represent our new discretised state as a bit vector,

15
00:00:44,628 --> 00:00:48,840
with ones for the tiles that get activated, and zeros elsewhere.

16
00:00:48,840 --> 00:00:52,730
This, by itself, is a very efficient representation.

17
00:00:52,729 --> 00:00:57,390
But the genius lies in how the state value function is computed using the scheme.

18
00:00:57,390 --> 00:01:01,499
Instead of storing a separate value for each state V of S,

19
00:01:01,499 --> 00:01:06,890
it is defined in terms of the bit vector for that state and a weight for each tile.

20
00:01:06,890 --> 00:01:12,025
The tile coding algorithm in turn updates these weights iteratively.

21
00:01:12,025 --> 00:01:18,300
This ensures nearby locations that share tiles also share some component of state value,

22
00:01:18,299 --> 00:01:21,995
effectively smoothing the learned value function.

23
00:01:21,995 --> 00:01:24,519
Tile coding does have some drawbacks.

24
00:01:24,519 --> 00:01:29,280
Just like a simple grid based approach we have to manually select the tile sizes,

25
00:01:29,280 --> 00:01:31,094
there offsets, number of tilings,

26
00:01:31,094 --> 00:01:33,414
etc, ahead of time.

27
00:01:33,415 --> 00:01:37,405
A more flexible approach is adaptive tile coding,

28
00:01:37,405 --> 00:01:39,754
which starts with fairly large tiles,

29
00:01:39,754 --> 00:01:43,744
and divides each tile into two whenever appropriate.

30
00:01:43,745 --> 00:01:45,650
How do we know when to split?

31
00:01:45,650 --> 00:01:47,905
Well, we can use a hero stick for that.

32
00:01:47,905 --> 00:01:51,200
Basically, we want to split the state space when we

33
00:01:51,200 --> 00:01:55,500
realize that we are no longer learning much with the current representation.

34
00:01:55,500 --> 00:01:59,230
That is, when our value function isn't changing.

35
00:01:59,230 --> 00:02:02,855
We can stop when we have reached some upper limit on the number of splits,

36
00:02:02,855 --> 00:02:04,972
or some max iterations.

37
00:02:04,972 --> 00:02:07,570
In order to figure out which tile to split,

38
00:02:07,570 --> 00:02:12,509
we have to look at which one is likely to have the greatest effect on the value function.

39
00:02:12,509 --> 00:02:17,264
For this, we need to keep track of subtiles and their projected weights.

40
00:02:17,264 --> 00:02:22,519
Then, we can pick the tile with the greatest difference between subtile weights.

41
00:02:22,520 --> 00:02:24,635
There are many other heuristics you can use,

42
00:02:24,634 --> 00:02:27,484
but the main advantage of adaptive tile coding,

43
00:02:27,485 --> 00:02:32,670
is that it does not rely on a human to specify a discretisation ahead of time.

44
00:02:32,669 --> 00:02:37,149
The resulting state space is appropriately partitioned based on its complexity.

