1
00:00:00,000 --> 00:00:03,589
现在我们将要学习一个非常重要的概念 叫做正则化

2
00:00:03,589 --> 00:00:07,439
这是改善我们模型 确保不会过度拟合的有效技巧

3
00:00:07,440 --> 00:00:12,359
注意这个概念可以用于回归和分类

4
00:00:12,359 --> 00:00:15,824
我们实际上可以利用分类问题对它进行解释 但是正如你看到的

5
00:00:15,824 --> 00:00:19,304
所有参数值都与回归算法一样发挥作用

6
00:00:19,304 --> 00:00:21,405
那么我们来看一下这些数据

7
00:00:21,405 --> 00:00:23,089
这是一些数据

8
00:00:23,089 --> 00:00:25,125
并且拷贝了一份这些数据

9
00:00:25,125 --> 00:00:28,975
我们看一下分类数据的两个模型

10
00:00:28,975 --> 00:00:31,635
第一个是一条直线

11
00:00:31,635 --> 00:00:35,719
第二个是高次多项式

12
00:00:35,719 --> 00:00:37,780
那么问题是 哪个更好呢？

13
00:00:37,780 --> 00:00:39,980
两种方法是不是各有利弊？

14
00:00:39,979 --> 00:00:42,549
左侧这个存在各种错误

15
00:00:42,549 --> 00:00:44,984
可以看到 有一个红点和蓝点都在错误位置

16
00:00:44,984 --> 00:00:47,155
但是这种方法更加简单

17
00:00:47,155 --> 00:00:50,715
右侧这个没有任何错误

18
00:00:50,715 --> 00:00:52,440
但实际上有点更加复杂

19
00:00:52,439 --> 00:00:53,879
那么如果我们想要左侧这个

20
00:00:53,880 --> 00:00:56,370
因为右侧这个过度拟合

21
00:00:56,369 --> 00:00:58,574
并且不具有较好的通用性

22
00:00:58,575 --> 00:01:04,343
所以问题在于当我们训练模型时

23
00:01:04,343 --> 00:01:07,825
右侧这个更可能出现 原因如下

24
00:01:07,825 --> 00:01:12,900
例如直线 3X1 + 4X2 + 5 = 0

25
00:01:12,900 --> 00:01:14,609
多元方程式可能更加复杂

26
00:01:14,609 --> 00:01:17,489
包括高次项 例如

27
00:01:17,489 --> 00:01:20,849
X1 的平方或 X1 乘以 X2 或者 X1 的三次方等

28
00:01:20,849 --> 00:01:22,769
但是当我们训练模型时

29
00:01:22,769 --> 00:01:25,560
模型得到误差 并进行最小化

30
00:01:25,560 --> 00:01:28,710
所以左侧这个误差较小

31
00:01:28,709 --> 00:01:30,464
因为只有两个错误

32
00:01:30,465 --> 00:01:32,070
但是只有一个误差

33
00:01:32,069 --> 00:01:34,079
这样就可以求出误差

34
00:01:34,079 --> 00:01:39,674
因为右侧这个分类没有错误 所以误差更小

35
00:01:39,674 --> 00:01:45,015
那么任何正确的模型都会拾取右侧的一个

36
00:01:45,015 --> 00:01:48,840
那么我们如何拾取左侧的呢？

37
00:01:48,840 --> 00:01:50,325
答案是这样的

38
00:01:50,325 --> 00:01:52,320
如果我们观察这个多项式

39
00:01:52,319 --> 00:01:55,289
这个要比右侧的更加简单

40
00:01:55,290 --> 00:01:56,380
系数更小 如 3 4 5

41
00:01:56,379 --> 00:01:59,954
而如果我们看这个

42
00:01:59,954 --> 00:02:03,170
这些数字更大一些

43
00:02:03,170 --> 00:02:04,500
所以可能还会更多

44
00:02:04,500 --> 00:02:12,014
如果我们通过这些数字的函数找到增加误差的方法

45
00:02:12,014 --> 00:02:13,649
那将会非常有帮助

46
00:02:13,650 --> 00:02:14,680
我们来做一下

47
00:02:14,680 --> 00:02:15,805
随后我会向你展示细节

48
00:02:15,805 --> 00:02:17,069
这种想法是我们求出

49
00:02:17,069 --> 00:02:20,389
这里的 3 和 4 注意我们这里忽略了常数项

50
00:02:20,389 --> 00:02:23,339
其中一个原因

51
00:02:23,340 --> 00:02:26,129
但是如果我们这里求出 3 和 4 并加到误差中

52
00:02:26,129 --> 00:02:27,990
我们得到稍大一些的误差

53
00:02:27,990 --> 00:02:30,990
但是如果我们得到 2 2 4 -3 6 4

54
00:02:30,990 --> 00:02:34,004
并加到误差中 会得到很大的误差

55
00:02:34,004 --> 00:02:38,219
现在我们看到左侧模型更好一些

56
00:02:38,219 --> 00:02:39,599
因为它的误差更小

57
00:02:39,599 --> 00:02:41,685
所以 总之我们要做的是

58
00:02:41,685 --> 00:02:46,930
在计算误差时考虑模型的复杂性

59
00:02:46,930 --> 00:02:51,629
简单的模型比复杂的模型更胜一筹

60
00:02:51,629 --> 00:02:53,689
简单的模型更具有通用性

61
00:02:53,689 --> 00:02:55,615
那是我们想要的

62
00:02:55,615 --> 00:02:58,770
但是让我更详细地讲解下

63
00:02:58,770 --> 00:03:03,125
如何利用这些绿色的系数 把它们转化为误差的一部分

64
00:03:03,125 --> 00:03:06,270
这种方法叫做 L1 正则化 非常简单

65
00:03:06,270 --> 00:03:07,965
这是个复杂的多项式

66
00:03:07,965 --> 00:03:12,780
它的作用在于可以得出系数 并且把它们的绝对值加起来

67
00:03:12,780 --> 00:03:18,569
所以可以看到 这是 2 -2 -4 等

68
00:03:18,569 --> 00:03:24,909
得到这些数字的绝对值 加起来后是 21

69
00:03:24,909 --> 00:03:27,060
在这个例子中 可以看到我们得到

70
00:03:27,060 --> 00:03:29,604
3 和 4 的绝对值 得到 7

71
00:03:29,604 --> 00:03:31,284
那么 7 远远小于 21

72
00:03:31,284 --> 00:03:36,020
所以这就是为什么复杂的模型得出较大的误差

73
00:03:36,020 --> 00:03:40,710
这就是 L1 正则化 它与绝对值相关

74
00:03:40,710 --> 00:03:43,590
L2 正则化是类似的

75
00:03:43,590 --> 00:03:45,525
我们这里要做的

76
00:03:45,525 --> 00:03:46,770
不是得到绝对值

77
00:03:46,770 --> 00:03:51,990
而是把系数的平方加起来

78
00:03:51,990 --> 00:03:57,480
所以我们得到 2 的平方加 -2 的平方加上 -4 的平方等等 最后得到 85

79
00:03:57,479 --> 00:03:59,294
在直线的这个例子中

80
00:03:59,294 --> 00:04:02,919
我们得到 3 的平方加 4 的平方等于25 这个值更小

81
00:04:02,919 --> 00:04:05,009
所以可以再次看到 复杂的模型

82
00:04:05,009 --> 00:04:08,379
比简单的模型受到更多惩罚

83
00:04:08,379 --> 00:04:12,435
但是现在问题是我们如何调优这些参数

84
00:04:12,435 --> 00:04:16,769
因为我们想用更复杂一点的模型

85
00:04:16,769 --> 00:04:19,594
所以我们这个参数称为 λ

86
00:04:19,595 --> 00:04:24,890
λ 的用途是可以乘以复杂误差

87
00:04:24,889 --> 00:04:28,039
乘以那个绿色的误差可以变大或变小

88
00:04:28,040 --> 00:04:29,935
所以如果有个小的 λ

89
00:04:29,935 --> 00:04:33,274
我们得到绿色的误差 把它乘以 λ

90
00:04:33,274 --> 00:04:35,039
我们就会得到很小的结果

91
00:04:35,040 --> 00:04:39,290
所以因为误差更小 所以右侧还是胜出

92
00:04:39,290 --> 00:04:42,715
我们得到某个复杂误差 但是这个误差更小

93
00:04:42,714 --> 00:04:47,310
现在如果我们有个大的 λ 乘以绿色的误差

94
00:04:47,310 --> 00:04:49,860
这是可以看到简单的模型

95
00:04:49,860 --> 00:04:54,360
更好 因为它的误差更小

96
00:04:54,360 --> 00:05:00,725
所以总体说来 如果我们有个大的 λ

97
00:05:00,725 --> 00:05:03,404
我们会更多地惩罚复杂性

98
00:05:03,404 --> 00:05:06,389
拾取更加简单的模型

99
00:05:06,389 --> 00:05:11,175
然而如果我们有个小的 λ 我们会以较小数量惩罚复杂性

100
00:05:11,175 --> 00:05:15,655
所以我们可以使用更复杂的模型

101
00:05:15,654 --> 00:05:19,349
现在的问题是我们应该使用哪个呢？ L1 还是 L2？

102
00:05:19,350 --> 00:05:25,740
这里是每个 L1 和 L2 优点的备忘单

103
00:05:25,740 --> 00:05:28,655
所以 L1 正则化实际上计算起来

104
00:05:28,654 --> 00:05:31,649
效率不高 虽然看起来更简单

105
00:05:31,649 --> 00:05:32,784
不包括平方

106
00:05:32,785 --> 00:05:38,390
但是这些绝对值很难求导(求微分)

107
00:05:38,389 --> 00:05:40,192
但是 L2 正则化中

108
00:05:40,192 --> 00:05:42,389
平方是比较不错的导数

109
00:05:42,389 --> 00:05:45,209
所以可以计算起来更加容易

110
00:05:45,209 --> 00:05:50,519
只有数据稀疏时  L1 正则化会比 L2 正则化更快

111
00:05:50,519 --> 00:05:53,407
那么如果说你有 1000 次数据运算

112
00:05:53,408 --> 00:05:56,819
实际上只有 10 个具有相关性

113
00:05:56,819 --> 00:06:01,409
其中包括很多 0 那么 L1 正则化更好些

114
00:06:01,410 --> 00:06:04,328
所以正如我说过的 L1 正则化适合稀疏输出

115
00:06:04,327 --> 00:06:07,634
L2 正则化更适合非稀疏输出

116
00:06:07,634 --> 00:06:11,514
如果很多列包含 0 那么 L1 正则化更好些

117
00:06:11,514 --> 00:06:17,594
但是如果数据均匀分布在各列 那么 L2 正则化更好些

118
00:06:17,595 --> 00:06:23,010
L1 正则化最大的好处在于提供特征选择

119
00:06:23,009 --> 00:06:26,279
所以如果我们有 1000 列数据

120
00:06:26,279 --> 00:06:28,934
实际上只有 10 列数据相关

121
00:06:28,935 --> 00:06:30,805
其他的都是噪音

122
00:06:30,805 --> 00:06:37,745
L1 可以注意到这一点 把不相关的数据转变为 0

123
00:06:37,745 --> 00:06:41,326
而 L2 就无法做到这一点

124
00:06:41,326 --> 00:06:44,700
L2 会对所有列平等对待

125
00:06:44,699 --> 00:06:48,704
并且给我们所有数据的总和作为结果

126
00:06:48,704 --> 00:06:50,144
所以就是这样

127
00:06:50,144 --> 00:06:52,000
这就是正则化

