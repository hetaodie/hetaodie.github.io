1
00:00:00,000 --> 00:00:03,924
现在介绍一个如何让直线离点近点的诀窍

2
00:00:03,924 --> 00:00:08,865
假设我们的线性方程是 3x1 + 4x2 - 10

3
00:00:08,865 --> 00:00:11,810
这个线性方程得出一条直线

4
00:00:11,810 --> 00:00:15,015
即方程等于 0 时的点 并得出两个区域

5
00:00:15,015 --> 00:00:19,949
蓝色表示的是正区域 即 3*1 + 4*2 - 10 为正数

6
00:00:19,949 --> 00:00:22,589
红色表示的是负区域

7
00:00:22,589 --> 00:00:26,750
即 3x1 + 4x2 - 10 为负数

8
00:00:26,750 --> 00:00:29,108
这是孤独的分类错误的点

9
00:00:29,108 --> 00:00:32,460
点 (4,5) 它是蓝色区域的红点

10
00:00:32,460 --> 00:00:34,840
这个点说“靠近点”

11
00:00:34,840 --> 00:00:38,310
如何让这个点离直线近点呢？

12
00:00:38,310 --> 00:00:41,085
我们将使用 4 和 5 来

13
00:00:41,085 --> 00:00:44,204
修改这条直线方程

14
00:00:44,204 --> 00:00:48,199
以便让直线靠近这个点

15
00:00:48,200 --> 00:00:52,225
这些是直线的参数 3 4 和 -10

16
00:00:52,225 --> 00:00:54,770
这个点的坐标是 (4,5)

17
00:00:54,770 --> 00:00:57,780
这里加个 1 表示偏置单元

18
00:00:57,780 --> 00:01:00,100
我们将用直线参数减去这些数字

19
00:01:00,100 --> 00:01:03,530
也就是 3 减去 4 4 减去 5

20
00:01:03,530 --> 00:01:08,109
以及 -10 减去 1

21
00:01:08,109 --> 00:01:10,329
新直线的参数将是 -1

22
00:01:10,329 --> 00:01:13,090
-1 和 -11

23
00:01:13,090 --> 00:01:15,380
这个直线将朝着该点剧烈地移动

24
00:01:15,379 --> 00:01:19,004
甚至有可能超过它 使其进入正确区域

25
00:01:19,004 --> 00:01:20,780
因为还有很多其他点

26
00:01:20,780 --> 00:01:23,000
所以不能做出剧烈的移动

27
00:01:23,000 --> 00:01:26,230
因为这样可能导致所有其他点分类错误

28
00:01:26,230 --> 00:01:29,064
我们希望这条直线朝着这个点小幅度移动

29
00:01:29,064 --> 00:01:33,149
因此 我们将朝着这个点小步移动

30
00:01:33,150 --> 00:01:35,600
这时候 我们就要介绍学习速度了

31
00:01:35,599 --> 00:01:37,274
学习速度是个很小的数字

32
00:01:37,275 --> 00:01:39,440
例如 0.1

33
00:01:39,439 --> 00:01:41,450
我们要做的是

34
00:01:41,450 --> 00:01:44,130
不再用直线坐标减去 4 5 和 1

35
00:01:44,129 --> 00:01:47,780
而是将这些数字乘以 0.1

36
00:01:47,780 --> 00:01:51,109
然后再用直线方程减去这些值

37
00:01:51,109 --> 00:01:53,179
也就是用直线方程减去

38
00:01:53,180 --> 00:01:56,550
0.4 0.5 和 0.1

39
00:01:56,549 --> 00:01:59,119
得出方程

40
00:01:59,120 --> 00:02:04,715
2.6x1 + 3.5x2 - 10.1 = 0

41
00:02:04,715 --> 00:02:07,890
这个新直线实际上将离该点更近

42
00:02:07,890 --> 00:02:11,194
同理 如果红色区域有个蓝点

43
00:02:11,194 --> 00:02:12,919
例如点 (1,1)

44
00:02:12,919 --> 00:02:16,829
它是落入负区域的正点

45
00:02:16,830 --> 00:02:20,920
这个点分类也不正确 说“靠近点”

46
00:02:20,919 --> 00:02:23,089
我们采取同样的操作

47
00:02:23,090 --> 00:02:27,110
但是将直线参数加上这些坐标 而不是减去

48
00:02:27,110 --> 00:02:31,240
同样 乘以学习速度 以便小步移动

49
00:02:31,240 --> 00:02:33,240
我们拿出该点的坐标 1 1

50
00:02:33,240 --> 00:02:36,540
并增加一个常量项 1

51
00:02:36,539 --> 00:02:40,484
现在用它们乘以学习速度 0.1

52
00:02:40,485 --> 00:02:43,260
并将它们与直线参数相加

53
00:02:43,259 --> 00:02:46,799
得出新的直线 等式为

54
00:02:46,800 --> 00:02:50,950
3.1x1 + 4.1x2 - 9.9

55
00:02:50,949 --> 00:02:54,674
这条直线离该点更近了

56
00:02:54,675 --> 00:02:59,000
对于感知器算法 我们将重复利用该诀窍

